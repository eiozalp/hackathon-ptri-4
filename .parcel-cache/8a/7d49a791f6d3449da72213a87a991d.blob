{"mappings":"gBAmBIA,WA8BKC,EAAmBC,MACb,aAAVA,EAAIC,OAAqB,OAGtBC,WAVUA,UACjBA,EAAG,IAAQC,IAAID,GAAME,SAASC,MAAK,MAC3BC,OAAS,IAAGJ,EAAMA,EAAIK,MAAM,IAC7BL,EAAIM,KAAI,KAOFC,CAAST,EAAIE,QACzBQ,QAAQC,IAAIT,GAEZQ,QAAQC,IAAG,sCAAuCb,mBAAgCI,MAC9EJ,IAAmBI,EAAG,iBA3BDA,GAC1BA,GAAOU,OAAOC,QAAQC,KAAKC,IAAG,CAAEb,IAAOc,UAChCC,EAAWD,EAAOd,GAClBgB,EAAgBD,EAASA,EAASX,OAAS,GACjDY,EAAcC,KAAG,IAAQC,MAAQC,UACjCH,EAAcI,SAAWJ,EAAcC,IAAMD,EAAcK,MAC3DN,EAASA,EAASX,OAAS,GAAKY,EAChCN,OAAOC,QAAQC,KAAKU,IAAG,EAAItB,GAAMe,IAEjCP,QAAQC,IAAIM,MAoBZQ,CAAkB3B,GAElBA,EAAiBI,QAEXwB,EAAO,CACZxB,IAAKA,EACLqB,OAAK,IAAOH,MAAQC,UACpBF,IAAK,KACLG,SAAU,MAIXV,OAAOC,QAAQC,KAAKC,IAAG,iBAAcY,MAEhCA,EAAKC,SAAS1B,GAWjBU,OAAOC,QAAQC,KAAKC,IAAG,CAAEb,IAAOc,UACzBC,EAAWD,EAAOd,GACxBe,EAASY,KAAKH,GACdd,OAAOC,QAAQC,KAAKU,IAAG,EAAItB,GAAMe,QAblCU,EAAKE,KAAK3B,GAEVU,OAAOC,QAAQC,KAAKU,IAAG,MAAGG,IAE1Bf,OAAOC,QAAQC,KAAKU,IAAG,EAAItB,GAAG,CAAIwB,KAClCd,OAAOC,QAAQC,KAAKC,IAAG,yBAAkBe,MAClC5B,KAAO4B,IAAWA,EAAS5B,GAAOF,EAAI+B,YAC5CnB,OAAOC,QAAQC,KAAKU,IAAG,UAAGM,YA5E/BlB,OAAOoB,QAAQC,YAAYC,aAAW,KACrCtB,OAAOC,QAAQC,KAAKU,IAAG,MAAS,KAChCZ,OAAOC,QAAQC,KAAKU,IAAG,UAAa,QAGrCZ,OAAOoB,QAAQG,UAAUD,aAAWE,UACnCxB,OAAOC,QAAQC,KAAKC,IAAG,QAAUC,IAC3BA,GAAQJ,OAAOC,QAAQC,KAAKU,IAAG,MAAS,QAE9CZ,OAAOC,QAAQC,KAAKC,IAAG,YAAcC,IAC/BA,GAAQJ,OAAOC,QAAQC,KAAKU,IAAG,UAAa,WAMnDZ,OAAOyB,KAAKC,UAAUJ,aAAWE,MAAQG,EAAOC,EAAYxC,KAC3DD,EAAmBC,MAGpBY,OAAOyB,KAAKI,YAAYP,aAAWE,MAAQM,UACnC1C,SAAaY,OAAOyB,KAAKM,MAAK,CAAGC,QAAQ,EAAMC,eAAe,IACrE9C,EAAmBC","sources":["background.js"],"sourcesContent":["\n// chrome.action.onClicked.addListener((action) => {\n// \tconsole.log('action occurred: ', action)\n// })\n\nchrome.runtime.onInstalled.addListener(() => {\n\tchrome.storage.sync.set({ 'keys': [] })\n\tchrome.storage.sync.set({ 'favicons': {} })\n});\n\nchrome.runtime.onStartup.addListener(async () => {\n\tchrome.storage.sync.get('keys', (result) => {\n\t\tif (!result) chrome.storage.sync.set({ 'keys': [] })\n\t})\n\tchrome.storage.sync.get('favicons', (result) => {\n\t\tif (!result) chrome.storage.sync.set({ 'favicons': {} })\n\t})\n})\n\nlet currentSession;\n\nchrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {\n\tprocessChangeEvent(tab);\n})\n\nchrome.tabs.onActivated.addListener(async (tabInfo) => {\n\tconst [tab] = await chrome.tabs.query({ active: true, currentWindow: true})\n\tprocessChangeEvent(tab);\n})\n\nfunction endCurrentSession(url) {\n\turl && chrome.storage.sync.get([url], (result) => {\n\t\tconst sessions = result[url]\n\t\tconst latestSession = sessions[sessions.length - 1]\n\t\tlatestSession.end = (new Date()).getTime();\n\t\tlatestSession.duration = latestSession.end - latestSession.start;\n\t\tsessions[sessions.length - 1] = latestSession\n\t\tchrome.storage.sync.set({ [url]: sessions})\n\n\t\tconsole.log(sessions);\n\t})\n}\n\nfunction parseUrl(url) {\n\turl = (new URL(url)).hostname.split('.') // docs.google.com != mail.google.com\n\tif (url.length > 2) url = url.slice(1)\n\treturn url.join('.')\n}\n\nfunction processChangeEvent(tab) {\n\tif (tab.status === 'complete') {\n\t\t// favIconUrl\n\t\t// currently, tab.url === the entire path rather than just the host\n\t\tconst url = parseUrl(tab.url)\n\t\tconsole.log(url) // google.com, netflix.com => docs.google.com === mail.google.com\n\n\t\tconsole.log(`Tab change event. Current session: ${currentSession}. New session: ${url}.`)\n\t\tif (currentSession === url) return // if changing the page to the same url (host), do nothing e.g., google.com/dogs => google.com/cats\n\n\t\tendCurrentSession(currentSession)\n\n\t\tcurrentSession = url\n\n\t\tconst session = {\n\t\t\turl: url,\n\t\t\tstart: (new Date()).getTime(),\n\t\t\tend: null,\n\t\t\tduration: null,\n\t\t}\n\n    // make sure that if it's a new URL, it's in our keys list\n\t\tchrome.storage.sync.get(['keys'], ({ keys }) => {\n\t\t\t// now you have acces to the keys\n\t\t\tif(!keys.includes(url)){\n\t\t\t\tkeys.push(url)\n\t\t\t\t// save the keys back into the storage\n\t\t\t\tchrome.storage.sync.set({ keys })\n\t\t\t\t// if we're here, set an empty array for the new key\n\t\t\t\tchrome.storage.sync.set({ [url]: [session] })\n\t\t\t\tchrome.storage.sync.get(['favicons'], ({ favicons }) => {\n\t\t\t\t\tif (!(url in favicons)) favicons[url] = tab.favIconUrl\n\t\t\t\t\tchrome.storage.sync.set({ favicons })\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tchrome.storage.sync.get([url], (result) => {\n\t\t\t\t\tconst sessions = result[url]\n\t\t\t\t\tsessions.push(session)\n\t\t\t\t\tchrome.storage.sync.set({ [url]: sessions })\n\t\t\t\t})\n\t\t\t}\n\t\t})\n\t}\n}"],"names":["$e3b780f727fd378eb97bc4a3f8d42907$var$currentSession","$e3b780f727fd378eb97bc4a3f8d42907$var$processChangeEvent","tab","status","url","URL","hostname","split","length","slice","join","$e3b780f727fd378eb97bc4a3f8d42907$var$parseUrl","console","log","chrome","storage","sync","get","result","sessions","latestSession","end","Date","getTime","duration","start","set","$e3b780f727fd378eb97bc4a3f8d42907$var$endCurrentSession","session","keys","includes","push","favicons","favIconUrl","runtime","onInstalled","addListener","onStartup","async","tabs","onUpdated","tabId","changeInfo","onActivated","tabInfo","query","active","currentWindow"],"version":3,"file":"background.js.map"}